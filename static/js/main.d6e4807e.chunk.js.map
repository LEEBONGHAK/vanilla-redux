{"version":3,"sources":["index.js"],"names":["plus","document","querySelector","minus","number","PLUS","MINUS","store","createStore","state","action","type","subscribe","innerHTML","getState","addEventListener","dispatch","form","input","ul","ADD_TODO","DELETE_TODO","toDoStore","text","id","uuidv4","filter","toDo","dispatchAddToDo","addToDo","dispatchDeleteToDo","event","target","parentNode","deleteToDo","toDos","forEach","li","createElement","btn","innerText","appendChild","preventDefault","value"],"mappings":"oJAIMA,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,UAC/BE,EAASH,SAASC,cAAc,QAEhCG,EAAO,OACPC,EAAQ,QAiBRC,EAAQC,aAbE,WAAwB,IAAvBC,EAAsB,uDAAd,EAAGC,EAAW,uCACrC,OAAQA,EAAOC,MACb,KAAKN,EACH,OAAOI,EAAQ,EACjB,KAAKH,EACH,OAAOG,EAAQ,EACjB,QACE,OAAOA,MAcbF,EAAMK,WANW,WACfR,EAAOS,UAAYN,EAAMO,cAQ3Bd,EAAKe,iBAAiB,SAAS,kBAAMR,EAAMS,SAAS,CAAEL,KAAMN,OAC5DF,EAAMY,iBAAiB,SAAS,kBAAMR,EAAMS,SAAS,CAAEL,KAAML,OAI7D,IAAMW,EAAOhB,SAASC,cAAc,QAC9BgB,EAAQjB,SAASC,cAAc,SAC/BiB,EAAKlB,SAASC,cAAc,MAE5BkB,EAAW,WACXC,EAAc,cAqBdC,EAAYd,aAXG,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC3C,OAAQA,EAAOC,MACb,KAAKS,EACH,MAAM,CAAE,CAAEG,KAAMb,EAAOa,KAAMC,GAAIC,gBAAjC,mBAAgDhB,IAClD,KAAKY,EACH,OAAOZ,EAAMiB,QAAO,SAAAC,GAAI,OAAIA,EAAKH,KAAOd,EAAOc,MACjD,QACE,OAAOf,MAMPmB,EAAkB,SAACL,GACvBD,EAAUN,SAtBI,SAACO,GACf,MAAO,CAAEZ,KAAMS,EAAUG,QAqBNM,CAAQN,KAGvBO,EAAqB,SAAAC,GACzB,IAAMP,EAAKO,EAAMC,OAAOC,WAAWT,GACnCF,EAAUN,SAvBO,SAACQ,GAClB,MAAO,CAAEb,KAAMU,EAAaG,MAsBTU,CAAWV,KAkBhCF,EAAUV,WAfS,WACjB,IAAMuB,EAAQb,EAAUR,WACxBK,EAAGN,UAAY,GACfsB,EAAMC,SAAQ,SAAAT,GACZ,IAAMU,EAAKpC,SAASqC,cAAc,MAC5BC,EAAMtC,SAASqC,cAAc,UACnCC,EAAI1B,UAAY,SAChB0B,EAAIxB,iBAAiB,QAASe,GAC9BO,EAAGb,GAAKG,EAAKH,GACba,EAAGG,UAAYb,EAAKJ,KACpBc,EAAGI,YAAYF,GACfpB,EAAGsB,YAAYJ,SAanBpB,EAAKF,iBAAiB,UAPL,SAAAgB,GACfA,EAAMW,iBACN,IAAMf,EAAOT,EAAMyB,MACnBzB,EAAMyB,MAAQ,GACdf,EAAgBD,Q","file":"static/js/main.d6e4807e.chunk.js","sourcesContent":["import { createStore } from 'redux';\nimport { v4 as uuidv4 } from 'uuid';\n\n// RURE REDUX: COUNTER\nconst plus = document.querySelector(\"#plus\");\nconst minus = document.querySelector(\"#minus\");\nconst number = document.querySelector(\"span\");\n\nconst PLUS = \"PLUS\";\nconst MINUS = \"MINUS\";\n\n// reducer는 data를 modify 해주는 함수로 reducer가 return하는 것은 application에 있는 data가 됨\n// action : redux에서 function을 부를 때 쓰는 두 번째 parameter 혹은 argument으로 reducer와 소통하기 위한 방법\nconst reducer = (state = 0, action) => {\n  switch (action.type ) {\n    case PLUS:\n      return state + 1;\n    case MINUS:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\n// store는 data를 저장하는 곳\n// CreateStore는 reducer를 요구함.\nconst store = createStore(reducer);\n\nconst onChange = () => {\n  number.innerHTML = store.getState();\n}\n\n// subscribe : store 안에 있는 변화 감지\n// store.subscribe(func); => store안의 변화를 감지하면 func 실행\nstore.subscribe(onChange);\n\n// reducer에게 Action을 보내는 방법 : store.dispatch({key: value});\nplus.addEventListener(\"click\", () => store.dispatch({ type: PLUS}));\nminus.addEventListener(\"click\", () => store.dispatch({ type: MINUS}));\n\n\n// RURE REDUX: TO DO LIST\nconst form = document.querySelector(\"form\");\nconst input = document.querySelector(\"input\");\nconst ul = document.querySelector(\"ul\");\n\nconst ADD_TODO = \"ADD_TODO\";\nconst DELETE_TODO = \"DELETE_TODO\";\n\nconst addToDo = (text) => {\n  return { type: ADD_TODO, text };\n}\n\nconst deleteToDo = (id) => {\n  return { type: DELETE_TODO, id };\n}\n\nconst toDoModifier = (state = [], action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return [{ text: action.text, id: uuidv4() }, ...state];\n    case DELETE_TODO:\n      return state.filter(toDo => toDo.id !== action.id);\n    default:\n      return state;\n  }\n};\n\nconst toDoStore = createStore(toDoModifier);\n\nconst dispatchAddToDo = (text) => {\n  toDoStore.dispatch(addToDo(text));\n};\n\nconst dispatchDeleteToDo = event => {\n  const id = event.target.parentNode.id;\n  toDoStore.dispatch(deleteToDo(id));\n}\n\nconst paintToDos = () => {\n  const toDos = toDoStore.getState();\n  ul.innerHTML = \"\";\n  toDos.forEach(toDo => {\n    const li = document.createElement(\"li\");\n    const btn = document.createElement(\"button\");\n    btn.innerHTML = \"DELETE\";\n    btn.addEventListener(\"click\", dispatchDeleteToDo);\n    li.id = toDo.id;\n    li.innerText = toDo.text;\n    li.appendChild(btn);\n    ul.appendChild(li);\n  });\n};\n\ntoDoStore.subscribe(paintToDos);\n\nconst onSubmit = event => {\n  event.preventDefault();\n  const toDo = input.value;\n  input.value = \"\";\n  dispatchAddToDo(toDo);\n};\n\nform.addEventListener(\"submit\", onSubmit);"],"sourceRoot":""}